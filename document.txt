#include <iostream>

#include <stdio.h>

#include <string>

using namespace std;

​

enum LogLevels {

DEBUG,

INFO,

WARNING,

ERROR,

FATAL

};

​

const char* const LEVEL_HEADINGS[] = {

"DEBUG", "INFO", "WARNING", "ERROR", "FATAL"

};

​

​

class Logger {

public:

Logger(int minLevel) : minLevel(minLevel) {}

virtual ~Logger() {}

​

void Log(const string& s, int level) {

if (level >= minLevel)

doLogJob(s, level);

​

}

​

int GetMinLevel() const { return minLevel; }

​

protected:

int minLevel;

virtual void doLogJob(const string& s, int level) = 0;

};

​

​

class FileLogger : public Logger {

public:

FileLogger(int minLevel, const string& fileName) : Logger(minLevel) {

logFile = fopen(fileName.c_str(), "a");

}

~FileLogger() {

fclose(logFile);

}

​

​

protected:

virtual void doLogJob(const string& s, int level) {

fprintf(logFile, "[%s] %s\n", LEVEL_HEADINGS[level], s.c_str());

}

​

private:

FILE* logFile;

};

​

class ConsoleLogger : public Logger {

public:

ConsoleLogger(int minLevel) : Logger(minLevel) {}

​

protected:

virtual void doLogJob(const string& s, int level) {

printf("[%s] %s\n", LEVEL_HEADINGS[level], s.c_str());

}

​

};

​

int main() {

Logger* l = new FileLogger(LogLevels::DEBUG, "log.txt");

delete l;

​

​

ConsoleLogger c(LogLevels::WARNING);

c.Log("abc", LogLevels::ERROR);

c.Log("def", LogLevels::INFO);

c.Log("ghi", LogLevels::WARNING);

​

FileLogger f(LogLevels::DEBUG, "log.txt");

f.Log("abc", LogLevels::ERROR);

f.Log("def", LogLevels::INFO);

f.Log("ghi", LogLevels::WARNING);

}

​

​

​

​